# Test 100 Exploits Database
# Verifica che il database CVE→MSF contenga 100 exploit mappings

Write-Host @"
╔══════════════════════════════════════════════════════════════════╗
║                                                                  ║
║   🎯 NEXTMAP - 100 EXPLOITS DATABASE TEST                       ║
║                                                                  ║
║   Verifying 100 CVE → Metasploit exploit mappings               ║
║   Database Evolution: 7 → 25 → 100 (+1329% total growth)        ║
║                                                                  ║
╚══════════════════════════════════════════════════════════════════╝
"@ -ForegroundColor Cyan

Write-Host "`n📊 DATABASE STATISTICS" -ForegroundColor Yellow
Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor DarkGray

# Count database insertions
Write-Host "`n[1/5] Counting exploit database insertions..." -ForegroundColor White
$dbInserts = (Select-String -Path ".\src\msf.rs" -Pattern "self.exploit_database.insert" | Measure-Object).Count
Write-Host "✅ Database insertions found: $dbInserts" -ForegroundColor Green

# Count unique CVEs
Write-Host "`n[2/5] Counting unique CVE identifiers..." -ForegroundColor White
$uniqueCVEs = Select-String -Path ".\src\msf.rs" -Pattern "CVE-\d{4}-\d+" -AllMatches | 
    ForEach-Object { $_.Matches } | 
    ForEach-Object { $_.Value } | 
    Sort-Object -Unique
$cveCount = ($uniqueCVEs | Measure-Object).Count
Write-Host "✅ Unique CVEs found: $cveCount" -ForegroundColor Green

# Verify expected count
Write-Host "`n[3/5] Verifying CVE count..." -ForegroundColor White
if ($cveCount -eq 100) {
    Write-Host "✅ PASS: Database contains exactly 100 CVEs" -ForegroundColor Green
} else {
    Write-Host "❌ FAIL: Expected 100 CVEs, found $cveCount" -ForegroundColor Red
    exit 1
}

# Category breakdown
Write-Host "`n[4/5] Analyzing CVE distribution by year..." -ForegroundColor White
$cvesByYear = @{}
foreach ($cve in $uniqueCVEs) {
    if ($cve -match "CVE-(\d{4})-") {
        $year = $matches[1]
        if (-not $cvesByYear.ContainsKey($year)) {
            $cvesByYear[$year] = @()
        }
        $cvesByYear[$year] += $cve
    }
}

Write-Host "`nYear Distribution:" -ForegroundColor Cyan
$cvesByYear.Keys | Sort-Object -Descending | ForEach-Object {
    $year = $_
    $count = $cvesByYear[$year].Count
    $percentage = [math]::Round(($count / $cveCount) * 100, 1)
    $bar = "█" * [math]::Min($count, 50)
    Write-Host "$year : $count exploits ($percentage%) $bar" -ForegroundColor White
}

# Sample critical 2024 CVEs
Write-Host "`n[5/5] Verifying critical 2024 CVEs..." -ForegroundColor White
$critical2024 = @(
    "CVE-2024-21887",  # Ivanti
    "CVE-2024-21762",  # Fortinet
    "CVE-2024-38476",  # Apache HTTP
    "CVE-2024-23897",  # Jenkins
    "CVE-2024-21626",  # runc
    "CVE-2024-22121",  # SAP
    "CVE-2024-3400",   # Palo Alto
    "CVE-2024-21893"   # Ivanti SSRF
)

$found2024 = 0
foreach ($cve in $critical2024) {
    if ($uniqueCVEs -contains $cve) {
        Write-Host "  ✅ $cve found" -ForegroundColor Green
        $found2024++
    } else {
        Write-Host "  ❌ $cve MISSING" -ForegroundColor Red
    }
}

Write-Host "`n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor DarkGray
Write-Host "`n📈 FINAL RESULTS" -ForegroundColor Yellow
Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor DarkGray

Write-Host "`nDatabase Insertions : $dbInserts" -ForegroundColor Cyan
Write-Host "Unique CVEs         : $cveCount" -ForegroundColor Cyan
Write-Host "2024 Critical CVEs  : $found2024/$($critical2024.Count)" -ForegroundColor Cyan
Write-Host "Time Coverage       : $(($cvesByYear.Keys | Measure-Object -Minimum -Maximum).Minimum) - $(($cvesByYear.Keys | Measure-Object -Minimum -Maximum).Maximum)" -ForegroundColor Cyan
Write-Host "Years Covered       : $($cvesByYear.Keys.Count) years" -ForegroundColor Cyan

# Sample 10 random CVEs for verification
Write-Host "`n🎲 RANDOM SAMPLE (10 CVEs):" -ForegroundColor Yellow
$uniqueCVEs | Get-Random -Count 10 | ForEach-Object {
    Write-Host "  • $_" -ForegroundColor White
}

# Category verification
Write-Host "`n📁 CATEGORY BREAKDOWN:" -ForegroundColor Yellow
$categories = @{
    "VPN/Firewall" = @("Ivanti", "Fortinet", "SonicWall", "Pulse", "F5", "Palo Alto")
    "Virtualization" = @("VMware")
    "Collaboration" = @("Zimbra", "Atlassian", "Jira", "Confluence")
    "Web Servers" = @("Apache", "NGINX", "Tomcat", "IIS")
    "CI/CD" = @("Jenkins", "GitLab")
    "Containers" = @("Docker", "Kubernetes", "runc")
    "Enterprise" = @("SAP", "Oracle", "WebLogic", "Zoho", "ColdFusion", "Veeam")
    "Windows" = @("Print", "SMB", "Exchange")
    "Linux" = @("Samba", "FTP", "Bash", "PHP")
    "CMS" = @("WordPress", "Joomla", "Drupal")
}

$msfContent = Get-Content ".\src\msf.rs" -Raw
foreach ($category in $categories.Keys) {
    $keywords = $categories[$category]
    $found = 0
    foreach ($keyword in $keywords) {
        $matches = ([regex]::Matches($msfContent, $keyword, [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
        $found += $matches
    }
    Write-Host "  $category : ~$found references" -ForegroundColor Cyan
}

Write-Host "`n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor DarkGray

if ($cveCount -eq 100 -and $found2024 -ge 6) {
    Write-Host "`n✅ ALL TESTS PASSED" -ForegroundColor Green
    Write-Host "   Database successfully expanded to 100 exploits!" -ForegroundColor Green
    exit 0
} else {
    Write-Host "`n❌ SOME TESTS FAILED" -ForegroundColor Red
    Write-Host "   Please verify database integrity" -ForegroundColor Red
    exit 1
}
